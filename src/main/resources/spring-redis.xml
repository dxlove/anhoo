<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">


    <!--redis哨兵 -->
    <!--<bean id="redisSentinelConfiguration"-->
    <!--class="org.springframework.data.redis.connection.RedisSentinelConfiguration">-->
    <!--<property name="master">-->
    <!--<bean class="org.springframework.data.redis.connection.RedisNode">-->
    <!--<property name="name" value="mymaster"/>-->
    <!--</bean>-->
    <!--</property>-->
    <!--<property name="sentinels">-->
    <!--<set>-->
    <!--<bean class="org.springframework.data.redis.connection.RedisNode">-->
    <!--<constructor-arg index="0" value="${redis.host.slave}"/>-->
    <!--<constructor-arg index="1" value="${slave.port}"/>-->
    <!--</bean>-->
    <!--<bean class="org.springframework.data.redis.connection.RedisNode">-->
    <!--<constructor-arg index="0" value="${redis.host.master}"/>-->
    <!--<constructor-arg index="1" value="${master.port}"/>-->
    <!--</bean>-->
    <!--</set>-->
    <!--</property>-->
    <!--</bean>-->

    <bean id="jedisConnFactory"
          class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
        <property name="hostName" value="${redis.host}"/>
        <property name="port" value="${redis.port}"/>
        <property name="password" value="${redis.password}"/>
        <property name="usePool" value="false"/>
        <!--<property name="poolConfig" ref="poolConfig"/>-->
        <!--<constructor-arg ref="redisSentinelConfiguration"/>-->
        <property name="timeout" value="10000"/>
    </bean>

    <bean id="stringRedisTemplate" class="org.springframework.data.redis.core.StringRedisTemplate">
        <property name="connectionFactory" ref="jedisConnFactory"/>
    </bean>

    <!-- 使用中间类解决RedisCache.jedisConnectionFactory的静态注入，从而使MyBatis实现第三方缓存 -->
    <bean id="redisCacheTransfer" class="com.anhoo.util.RedisCacheTransfer">
        <property name="jedisConnectionFactory" ref="jedisConnFactory"/>
    </bean>


    <!--chat-->
    <bean id="msgListener_c" class="com.anhoo.util.MyMsgListener"/>
    <!--<bean id="msgListener_u" class="com.anhoo.util.MyMsgListener"/>-->

    <bean id="listenerContainer" class="org.springframework.data.redis.listener.RedisMessageListenerContainer">
        <property name="connectionFactory" ref="jedisConnFactory"/>
        <property name="messageListeners">
            <map>
                <entry key-ref="msgListener_c" value-ref="patternTopic_c"/>
                <!--<entry key-ref="msgListener_u" value-ref="patternTopic_u"/>-->
            </map>
        </property>
    </bean>
    <!--订阅 数据库数据变更时吗，删除缓存key-->
    <bean id="patternTopic_u" class="org.springframework.data.redis.listener.PatternTopic">
        <constructor-arg value="update_*"/>
    </bean>

    <bean id="patternTopic_c" class="org.springframework.data.redis.listener.PatternTopic">
        <constructor-arg value="chat_*"/>
    </bean>




</beans>